
const questions = [
  {
    question: 'Питання №1: Що таке замикання (closure) в JavaScript?',
    options: [
      'Функція, яка приймає іншу функцію як аргумент.',
      'Об\'єкт, який зберігає дані і методи.',
      'Змінна, яка зберігає посилання на функцію поза її областю видимості.'
    ],
    correctAnswer: 'Змінна, яка зберігає посилання на функцію поза її областю видимості.'
  },
  {
    question: 'Питання №2: Що спричиняє створення замикання в JavaScript?',
    options: [
      'Використання ключового слова `this` в середині функції.',
      'Збереження посилання на функцію поза її областю видимості.',
      'Використання класів та об\'єктів.'
    ],
    correctAnswer: 'Збереження посилання на функцію поза її областю видимості.'
  },
  {
    question: 'Питання №3: Для чого можна використовувати замикання в JavaScript?',
    options: [
      'Для зберігання інформації про об\'єкти та їх властивості.',
      'Для огортування коду і забезпечення видимості змінних.',
      'Для підрахунку математичних операцій.'
    ],
    correctAnswer: 'Для огортування коду і забезпечення видимості змінних.'
  },
  {
    question: 'Питання №4: Що таке асинхронність в JavaScript?',
    options: [
      'Можливість виконувати кілька функцій одночасно на різних потоках.',
      'Стиль програмування, який передбачає виключно синхронний код.',
      'Можливість виконувати декілька операцій одночасно без блокування основного потоку.'
    ],
    correctAnswer: 'Можливість виконувати декілька операцій одночасно без блокування основного потоку.'
  },
  {
    question: 'Питання №5: Що таке колбеки (callbacks) в асинхронному JavaScript?',
    options: [
      'Функції, які викликаються з помилкою при асинхронному коді.',
      'Спеціальні об\'єкти для відстеження прогресу виконання асинхронних операцій.',
      'Функції, які передаються в іншу функцію для виконання після завершення асинхронної операції.'
    ],
    correctAnswer: 'Функції, які передаються в іншу функцію для виконання після завершення асинхронної операції.'
  },
  {
    question: 'Питання №6: Що таке Promise  в JavaScript?',
    options: [
      'Стандартний об\'єкт для зберігання промісів із значеннями.',
      'Спеціальний тип змінної, який може містити асинхронний код.',
      'Механізм для представлення потенційного результату асинхронної операції.'
    ],
    correctAnswer: 'Механізм для представлення потенційного результату асинхронної операції.'
  },
  {
    question: 'Питання №7: Що таке async/await в JavaScript?',
    options: [
      'Оператори для зберігання результатів асинхронних операцій у змінних.',
      'Спеціальний синтаксис для виконання декількох асинхронних операцій одночасно.',
      'Синтаксис для більш зручного написання асинхронного коду на основі промісів.'
    ],
    correctAnswer: 'Синтаксис для більш зручного написання асинхронного коду на основі промісів.'
  },
  {
    question: 'Питання №8: Що таке Event Loop в JavaScript?',
    options: [
      'Механізм, який використовується для обробки різних типів подій у веб-додатках.',
      'Механізм, який забезпечує асинхронне виконання функцій у JavaScript.',
      'Механізм, який керує порядком виконання завдань у черзі і забезпечує виконання подій у правильному порядку.'
    ],
    correctAnswer: 'Механізм, який керує порядком виконання завдань у черзі і забезпечує виконання подій у правильному порядку.'
  },
  {
    question: 'Питання №9: Що таке виключення (exception) в JavaScript?',
    options: [
      'Об\'єкт, який містить значення помилки та контекст її виникнення.',
      'Особливий тип даних, який зберігає інформацію про поточний стан програми.',
      'Процес, за допомогою якого JavaScript перехоплює та виправляє помилки автоматично.'
    ],
    correctAnswer: 'Об\'єкт, який містить значення помилки та контекст її виникнення.'
  },
  {
    question: 'Питання №10: Яким чином можна обробити виключення в JavaScript?',
    options: [
      'За допомогою конструкції `try-catch`.',
      'Перевіряючи наявність виключення за допомогою умовних операторів.',
      'За допомогою функції `throw` для генерації нового виключення.'
    ],
    correctAnswer: 'За допомогою конструкції `try-catch`.'
  },
  {
    question: 'Питання №11: Які переваги використання обробки виключень в JavaScript?',
    options: [
      'Дозволяє перенести виключення на вищий рівень коду для зручнішого управління помилками.',
      'Пришвидшує виконання коду, уникнувши перевірки на помилки.',
      'Дозволяє автоматично виправляти помилки у коді.'
    ],
    correctAnswer: 'Дозволяє перенести виключення на вищий рівень коду для зручнішого управління помилками.'
  }
];

module.exports = questions